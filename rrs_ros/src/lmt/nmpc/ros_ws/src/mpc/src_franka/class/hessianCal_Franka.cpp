#include <hessianCal.h>
#include <ros/ros.h>

void HessianCal::getAnalyticalJacobian(const vector<double> &qs, Matrix7d &jacobian)//updated
{
  // temp variables used for matlab auto generated code

  double q1 = qs[0];
  double q2 = qs[1];
  double q3 = qs[2];
  double q4 = qs[3];
  double q5 = qs[4];
  double q6 = qs[5];
  double q7 = qs[6];

  double t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,t45,t46,t47,t48,t49,t50;
  double t51,t52,t53,t54,t55,t56,t57,t58,t59,t60,t61,t62,t63,t64,t65,t66,t67,t68,t69,t70,t71,t72,t73,t74,t75,t76,t77,t78,t79,t80,t81,t82,t83,t84,t85,t86,t87,t88,t89,t90,t91,t92,t93,t94,t95,t96,t97,t98,t99,t100;
  double t101,t102,t103,t104,t105,t106,t107,t108,t109,t110,t111,t112,t113,t114,t115,t116,t117,t118,t119,t120,t121,t122,t123,t124,t125,t126,t127,t128,t129,t130,t131,t132,t133,t134,t135,t136,t137,t138,t139,t140,t141,t142,t143,t144,t145,t146,t147,t148,t149,t150;
  double t151,t152,t153,t154,t155,t156,t157,t158,t159,t160,t161,t162,t163,t164,t165,t166,t167,t168,t169,t170,t171,t172,t173,t174,t175,t176,t177,t178,t179,t180,t181,t182,t183,t184,t185,t186,t187,t188,t189,t190,t191,t192,t193,t194,t195,t196,t197,t198,t199,t200;
  double t201,t202,t203,t204,t205,t206,t207,t208,t209,t210,t211,t212,t213,t214,t215,t216,t217,t218,t219,t220,t221,t222,t223,t224,t225,t226,t227,t228,t229,t230,t231,t232,t233,t234,t235,t236,t237,t238,t239,t240,t241,t242,t243,t244,t245;
  double A0[7][7];
  memset(A0,0,sizeof(A0));



  // matlab auto generated code
  t2 = cos(q1);
  t3 = cos(q2);
  t4 = cos(q3);
  t5 = cos(q4);
  t6 = cos(q5);
  t7 = cos(q6);
  t8 = cos(q7);
  t9 = sin(q1);
  t10 = sin(q2);
  t11 = sin(q3);
  t12 = sin(q4);
  t13 = sin(q5);
  t14 = sin(q6);
  t15 = sin(q7);
  t16 = t2*t2;
  t17 = t3*t3;
  t18 = t9*t9;
  t19 = t10*t10;
  t20 = t2*t4;
  t21 = t3*t5;
  t22 = t2*t11;
  t23 = t4*t9;
  t24 = t3*t12;
  t25 = t9*t11;
  t26 = t7*8.8E+1;
  t27 = t14*1.07E+2;
  t28 = t9*t10*t12;
  t30 = t10*t11*t13;
  t35 = t2*t5*t10;
  t37 = t4*t5*t10;
  t40 = t2*t10*t12;
  t41 = t5*t9*t10;
  t44 = t4*t10*t12;
  t45 = t6*t10*t11;
  t67 = t3*(7.9E+1/2.5E+2);
  t69 = t4*t10*(3.3E+1/4.0E+2);
  t29 = t12*t25;
  t31 = t3*t20;
  t32 = t7*t21;
  t33 = t3*t22;
  t34 = t3*t23;
  t36 = t5*t22;
  t38 = t6*t24;
  t39 = t3*t25;
  t42 = t12*t22;
  t43 = t5*t25;
  t46 = t13*t24;
  t47 = t20*t21;
  t48 = t6*t8*t20;
  t49 = t20*t24;
  t50 = t21*t23;
  t51 = t6*t37;
  t52 = t23*t24;
  t53 = t13*t37;
  t54 = t7*t44;
  t55 = t6*t15*t23;
  t59 = -t37;
  t60 = t14*t30;
  t62 = -t40;
  t63 = -t41;
  t65 = -t45;
  t68 = t21*(4.8E+1/1.25E+2);
  t70 = t24*(3.3E+1/4.0E+2);
  t73 = t8*t14*t35;
  t76 = t7*t13*t15*t20;
  t77 = t7*t8*t13*t23;
  t81 = t13*t15*t40;
  t82 = t8*t13*t28;
  t83 = t14*t15*t41;
  t88 = -t69;
  t90 = t28*(3.3E+1/4.0E+2);
  t93 = t21+t44;
  t98 = t6*t7*t8*t40;
  t103 = t6*t7*t15*t28;
  t109 = t26+t27;
  t110 = t35*(4.8E+1/1.25E+2);
  t111 = t37*(3.3E+1/4.0E+2);
  t112 = t41*(4.8E+1/1.25E+2);
  t113 = t44*(4.8E+1/1.25E+2);
  t114 = t40*(3.3E+1/4.0E+2);
  t56 = t14*t38;
  t57 = -t31;
  t58 = -t32;
  t61 = -t39;
  t64 = -t43;
  t66 = -t46;
  t71 = t6*t15*t33;
  t72 = t6*t8*t39;
  t74 = t8*t13*t36;
  t75 = t14*t51;
  t78 = -t48;
  t79 = -t49;
  t80 = -t51;
  t84 = t13*t15*t43;
  t85 = t14*t15*t42;
  t86 = t8*t14*t29;
  t87 = -t54;
  t89 = -t70;
  t91 = t22+t34;
  t92 = t23+t33;
  t94 = t13*t15*t47;
  t95 = t8*t13*t50;
  t96 = t8*t14*t49;
  t97 = t7*t8*t13*t33;
  t99 = t6*t7*t15*t36;
  t100 = t6*t7*t8*t43;
  t101 = t14*t15*t52;
  t102 = t7*t13*t15*t39;
  t105 = -t76;
  t106 = -t77;
  t107 = t14*t15*t63;
  t115 = t32*t48;
  t116 = t32*t55;
  t119 = t24+t59;
  t124 = -t103;
  t127 = t7*t93;
  t130 = t14*t93;
  t146 = t28+t36+t50;
  t156 = t42+t52+t63;
  t104 = -t75;
  t108 = t13*t15*t64;
  t117 = t20+t61;
  t118 = t25+t57;
  t120 = t8*t14*t79;
  t121 = -t97;
  t122 = -t99;
  t123 = t6*t7*t8*t64;
  t125 = t5*t91;
  t126 = t6*t92;
  t128 = t12*t91;
  t129 = t13*t92;
  t131 = t55*t58;
  t135 = t6*t119;
  t136 = -t127;
  t140 = t13*t119;
  t143 = t130*(1.1E+1/1.25E+2);
  t148 = t127*(1.07E+2/1.0E+3);
  t153 = t40+t47+t64;
  t154 = t29+t35+t79;
  t155 = t30+t38+t80;
  t160 = t6*t146;
  t161 = t13*t146;
  t174 = t14*t156;
  t132 = t5*t118;
  t133 = t6*t117;
  t134 = -t126;
  t137 = t12*t118;
  t138 = t13*t117;
  t139 = -t129;
  t142 = t125*(3.3E+1/4.0E+2);
  t144 = t128*(4.8E+1/1.25E+2);
  t145 = t28+t125;
  t150 = -t148;
  t151 = t63+t128;
  t152 = t30+t135;
  t162 = t65+t140;
  t165 = -t7*(t41-t128);
  t168 = t6*t153;
  t169 = -t14*(t41-t128);
  t171 = t13*t153;
  t172 = t14*t154;
  t173 = t14*t155;
  t177 = -t8*(t45-t140);
  t178 = -t15*(t45-t140);
  t179 = t8*(t45-t140);
  t182 = t14*(t41-t128)*(-1.1E+1/1.25E+2);
  t184 = t14*(t41-t128)*(1.1E+1/1.25E+2);
  t186 = t7*(t41-t128)*(-1.07E+2/1.0E+3);
  t244 = t55+t56+t58+t60+t71+t72+t73+t74+t78+t81+t82+t85+t86+t87+t94+t95+t98+t101+t102+t104+t105+t106+t107+t108+t115+t120+t121+t122+t123+t124+t131+1.0;
  t141 = -t133;
  t147 = t132*(3.3E+1/4.0E+2);
  t149 = t137*(4.8E+1/1.25E+2);
  t157 = t35+t137;
  t158 = t6*t145;
  t159 = t13*t145;
  t163 = t62+t132;
  t167 = t7*t152;
  t170 = t14*t152;
  t175 = -t6*(t40-t132);
  t176 = -t13*(t40-t132);
  t190 = t126+t171;
  t191 = t138+t160;
  t195 = t139+t168;
  t208 = -t7*(t129-t168);
  t211 = -t8*(t133-t161);
  t213 = -t8*(t126+t13*(t40-t132));
  t214 = -t15*(t126+t13*(t40-t132));
  t215 = t15*(t126+t13*(t40-t132));
  t245 = 1.0/sqrt(t244);
  t164 = t7*t157;
  t166 = t14*t157;
  t181 = t167*(1.1E+1/1.25E+2);
  t187 = t170*(1.07E+2/1.0E+3);
  t188 = t138+t158;
  t189 = t130+t167;
  t192 = t129+t175;
  t193 = t141+t159;
  t194 = t136+t170;
  t196 = t141+t161;
  t201 = t7*t191;
  t202 = t15*t190;
  t203 = t134+t176;
  t207 = -t8*(t133-t159);
  t209 = -t15*(t133-t159);
  t222 = t172+t208;
  t180 = t166*(1.1E+1/1.25E+2);
  t185 = t164*(1.07E+2/1.0E+3);
  t197 = t7*t188;
  t198 = t8*t189;
  t199 = t14*t188;
  t200 = t15*t189;
  t204 = t7*t192;
  t205 = t14*t192;
  t210 = -t201;
  t228 = t8*t222;
  t233 = t143+t150+t181+t187;
  t183 = -t180;
  t206 = -t197;
  t212 = -t204;
  t216 = t197*(1.1E+1/1.25E+2);
  t217 = t204*(1.1E+1/1.25E+2);
  t218 = t199*(1.07E+2/1.0E+3);
  t219 = t205*(1.07E+2/1.0E+3);
  t220 = t165+t199;
  t223 = t174+t210;
  t224 = t164+t205;
  t226 = -t8*(t197+t14*(t41-t128));
  t227 = -t15*(t197+t14*(t41-t128));
  t232 = t8*(t197+t14*(t41-t128));
  t236 = t68+t89+t111+t113+t233;
  t221 = t169+t206;
  t225 = t166+t212;
  t229 = t15*t223;
  t234 = t178+t198+t224;
  t235 = t179+t200+t220;
  t237 = t67+t88+t236;
  t230 = t8*t225;
  t231 = t15*t225;
  t239 = t136+t173+t202+t211+t228+t229+1.0;
  t238 = t209+t213+t231+t232;
  t240 = 1.0/sqrt(t239);
  t241 = t194+t207+t215+t227+t230+1.0;
  t242 = sqrt(t241);
  t243 = 1.0/t242;
  A0[0][0] = t22*(-3.3E+1/4.0E+2)-t34*(3.3E+1/4.0E+2)+t90-t112+t142+t144+t182-t216-t218-t9*t10*(7.9E+1/2.5E+2)+t7*(t41-t128)*(1.07E+2/1.0E+3);
  A0[0][1] = t2*t237;
  A0[0][2] = t23*(-3.3E+1/4.0E+2)-t33*(3.3E+1/4.0E+2)+t5*t23*(3.3E+1/4.0E+2)+t12*t23*(4.8E+1/1.25E+2)+t21*t22*(3.3E+1/4.0E+2)+t22*t24*(4.8E+1/1.25E+2)-t7*t12*t23*(1.07E+2/1.0E+3)+t7*t13*t25*(1.1E+1/1.25E+2)+t12*t14*t23*(1.1E+1/1.25E+2)-t7*t13*t31*(1.1E+1/1.25E+2)+t13*t14*t25*(1.07E+2/1.0E+3)-t7*t22*t24*(1.07E+2/1.0E+3)-t13*t14*t31*(1.07E+2/1.0E+3)-t6*t22*t32*(1.1E+1/1.25E+2)+t14*t22*t24*(1.1E+1/1.25E+2)-t5*t6*t7*t23*(1.1E+1/1.25E+2)-t5*t6*t14*t23*(1.07E+2/1.0E+3)-t6*t14*t21*t22*(1.07E+2/1.0E+3);
  A0[0][3] = -t117*t236-t10*t11*(t90-t112+t142+t144+t182-t216-t218+t7*(t41-t128)*(1.07E+2/1.0E+3));
  A0[0][4] = t109*(t6*t23+t6*t33+t13*t40+t13*t47+t13*t64)*(-1.0/1.0E+3);
  A0[0][5] = (t45-t140)*(t184+t186+t216+t218)-t233*(t133-t159);
  A0[1][0] = t25*(-3.3E+1/4.0E+2)+t31*(3.3E+1/4.0E+2)+t110-t114+t147+t149+t180-t185-t217-t219+t2*t10*(7.9E+1/2.5E+2);
  A0[1][1] = t9*t237;
  A0[1][2] = t20*(3.3E+1/4.0E+2)-t39*(3.3E+1/4.0E+2)-t5*t20*(3.3E+1/4.0E+2)-t12*t20*(4.8E+1/1.25E+2)+t21*t25*(3.3E+1/4.0E+2)+t24*t25*(4.8E+1/1.25E+2)+t7*t12*t20*(1.07E+2/1.0E+3)-t7*t13*t22*(1.1E+1/1.25E+2)-t12*t14*t20*(1.1E+1/1.25E+2)-t13*t14*t22*(1.07E+2/1.0E+3)-t7*t13*t34*(1.1E+1/1.25E+2)-t7*t24*t25*(1.07E+2/1.0E+3)-t13*t14*t34*(1.07E+2/1.0E+3)-t6*t25*t32*(1.1E+1/1.25E+2)+t14*t24*t25*(1.1E+1/1.25E+2)+t5*t6*t7*t20*(1.1E+1/1.25E+2)+t5*t6*t14*t20*(1.07E+2/1.0E+3)-t6*t14*t21*t25*(1.07E+2/1.0E+3);
  A0[1][3] = -t92*t236-t10*t11*(t110-t114+t147+t149+t180-t185-t217-t219);
  A0[1][4] = t109*(-t6*t20+t13*t28+t6*t39+t13*t36+t13*t50)*(-1.0/1.0E+3);
  A0[1][5] = -t233*(t126+t13*(t40-t132))+(t45-t140)*(t183+t185+t217+t219);
  A0[2][1] = t10*(-7.9E+1/2.5E+2)-t3*t4*(3.3E+1/4.0E+2)-t5*t10*(4.8E+1/1.25E+2)+t10*t12*(3.3E+1/4.0E+2)+t4*t21*(3.3E+1/4.0E+2)+t4*t24*(4.8E+1/1.25E+2)+t5*t7*t10*(1.07E+2/1.0E+3)-t5*t10*t14*(1.1E+1/1.25E+2)-t4*t7*t24*(1.07E+2/1.0E+3)-t4*t6*t32*(1.1E+1/1.25E+2)+t4*t14*t24*(1.1E+1/1.25E+2)+t3*t7*t11*t13*(1.1E+1/1.25E+2)-t6*t7*t10*t12*(1.1E+1/1.25E+2)+t3*t11*t13*t14*(1.07E+2/1.0E+3)-t6*t10*t12*t14*(1.07E+2/1.0E+3)-t4*t6*t14*t21*(1.07E+2/1.0E+3);
  A0[2][2] = (t10*(t11*1.65E+2-t5*t11*1.65E+2-t11*t12*7.68E+2+t4*t7*t13*1.76E+2+t7*t11*t12*2.14E+2+t4*t13*t14*2.14E+2-t11*t12*t14*1.76E+2+t5*t6*t7*t11*1.76E+2+t5*t6*t11*t14*2.14E+2))/2.0E+3;
  A0[2][3] = t21*(-3.3E+1/4.0E+2)-t24*(4.8E+1/1.25E+2)+t37*(4.8E+1/1.25E+2)-t44*(3.3E+1/4.0E+2)+t7*t24*(1.07E+2/1.0E+3)+t6*t32*(1.1E+1/1.25E+2)-t14*t24*(1.1E+1/1.25E+2)-t7*t37*(1.07E+2/1.0E+3)+t14*t37*(1.1E+1/1.25E+2)+t6*t54*(1.1E+1/1.25E+2)+t6*t14*t21*(1.07E+2/1.0E+3)+t6*t14*t44*(1.07E+2/1.0E+3);
  A0[2][4] = (t109*(t45+t53+t66))/1.0E+3;
  A0[2][5] = t32*(1.1E+1/1.25E+2)+t54*(1.1E+1/1.25E+2)-t56*(1.1E+1/1.25E+2)-t60*(1.1E+1/1.25E+2)+t75*(1.1E+1/1.25E+2)+t14*t21*(1.07E+2/1.0E+3)+t7*t30*(1.07E+2/1.0E+3)+t7*t38*(1.07E+2/1.0E+3)-t7*t51*(1.07E+2/1.0E+3)+t14*t44*(1.07E+2/1.0E+3);
  A0[3][0] = t243*(t213+t231+t232-t15*(t133-t159))*(-1.0/4.0);
  A0[3][1] = t243*(t2*t15*t66+t8*t9*t66-t5*t7*t10*t16-t5*t7*t10*t18-t2*t8*t14*t21+t6*t8*t10*t25+t4*t7*t16*t24+t4*t7*t18*t24+t6*t10*t15*t22-t2*t7*t8*t38+t9*t14*t15*t21+t7*t9*t15*t38+t5*t7*t10*t48-t5*t7*t10*t55-t3*t11*t13*t14*t16+t6*t10*t12*t14*t16-t3*t11*t13*t14*t18+t5*t8*t10*t13*t23+t6*t10*t12*t14*t18-t7*t8*t10*t13*t22+t4*t6*t14*t16*t21+t4*t6*t14*t18*t21+t5*t10*t13*t15*t20-t8*t10*t12*t14*t20+t7*t10*t13*t15*t25+t10*t12*t14*t15*t23)*(-1.0/4.0);
  A0[3][2] = (t243*(t6*t8*t34+t6*t15*t31+t6*t8*t17*t22+t6*t8*t19*t22-t6*t15*t17*t25-t6*t15*t19*t25-t8*t13*t21*t25+t8*t14*t22*t24+t7*t13*t15*t34-t13*t15*t21*t22+t6*t15*t25*t32-t14*t15*t24*t25+t5*t14*t16*t45+t5*t14*t18*t45+t7*t8*t13*t57+t6*t8*t22*t58+t7*t10*t11*t12*t16+t4*t10*t13*t14*t16+t7*t10*t11*t12*t18+t4*t10*t13*t14*t18+t5*t8*t13*t17*t20+t5*t8*t13*t19*t20+t7*t8*t13*t17*t25+t7*t8*t13*t19*t25-t5*t13*t15*t17*t23+t7*t13*t15*t17*t22+t8*t12*t14*t17*t23-t5*t13*t15*t19*t23+t7*t13*t15*t19*t22+t8*t12*t14*t19*t23+t12*t14*t15*t17*t20+t12*t14*t15*t19*t20-t5*t6*t7*t8*t17*t23-t5*t6*t7*t8*t19*t23-t5*t6*t7*t15*t17*t20-t5*t6*t7*t15*t19*t20))/4.0;
  A0[3][3] = (t240*(t7*t24+t7*t59+t6*t14*t21+t13*t15*t29+t14*t15*t28+t8*t13*t41-t8*t13*t42+t13*t15*t35+t6*t14*t44+t8*t14*t43+t14*t15*t36-t8*t14*t47+t14*t15*t50+t8*t14*t62+t8*t23*t66+t15*t20*t66+t6*t7*t8*t29+t6*t7*t8*t35+t6*t7*t15*t42-t7*t8*t20*t38+t7*t15*t23*t38+t6*t7*t15*t63))/4.0;
  A0[3][4] = (t240*(t14*t45+t14*t53+t14*t66+t8*t13*t20+t6*t8*t28+t6*t8*t36-t13*t15*t23+t6*t15*t40-t13*t15*t33+t6*t8*t50+t6*t15*t47+t8*t13*t61+t6*t15*t64-t6*t7*t8*t23-t6*t7*t15*t20-t6*t7*t8*t33+t7*t13*t15*t28+t6*t7*t15*t39+t7*t8*t13*t43+t7*t13*t15*t36+t13*t15*t23*t32+t7*t8*t13*t62+t8*t13*t20*t58))/4.0;
  A0[3][5] = (t240*(t14*t21+t7*t30+t7*t38+t14*t44+t7*t80+t7*t8*t29+t7*t8*t35+t7*t15*t42+t7*t15*t52+t7*t15*t63+t7*t8*t79+t8*t13*t14*t23+t13*t14*t15*t20+t6*t14*t15*t28+t8*t13*t14*t33+t6*t8*t14*t43+t6*t14*t15*t36-t6*t8*t14*t47+t6*t14*t15*t50+t6*t8*t14*t62+t13*t14*t15*t61))/4.0;
  A0[3][6] = t245*(-t6*t8*t23-t6*t15*t20-t6*t8*t33+t13*t15*t28+t14*t15*t29+t6*t15*t39+t8*t14*t41+t8*t13*t43-t8*t14*t42+t13*t15*t36+t14*t15*t35-t8*t13*t47-t8*t14*t52+t13*t15*t50+t8*t13*t62+t14*t15*t79+t7*t8*t13*t20+t6*t7*t8*t28+t6*t7*t8*t36-t7*t13*t15*t23+t6*t7*t15*t40-t7*t13*t15*t33+t6*t8*t23*t32+t6*t15*t20*t32+t7*t8*t13*t61+t6*t7*t15*t64)*(-1.0/4.0);
  A0[4][0] = (t234*t243)/4.0;
  A0[4][1] = t243*(t9+t9*t56+t9*t58+t4*t6*t15*t16+t4*t6*t15*t18-t7*t10*t12*t23+t10*t13*t14*t25+t3*t6*t8*t11*t16+t3*t6*t8*t11*t18-t4*t7*t8*t13*t16-t4*t7*t8*t13*t18-t5*t6*t10*t14*t23+t8*t10*t12*t13*t16-t5*t10*t14*t15*t16-t5*t11*t13*t15*t16+t8*t10*t12*t13*t18+t8*t11*t12*t14*t16+t4*t8*t13*t16*t21-t5*t10*t14*t15*t18-t5*t11*t13*t15*t18+t8*t11*t12*t14*t18+t4*t8*t13*t18*t21+t4*t14*t15*t16*t24+t4*t14*t15*t18*t24+t4*t6*t15*t16*t58+t4*t6*t15*t18*t58-t5*t6*t7*t8*t11*t16-t5*t6*t7*t8*t11*t18+t3*t7*t11*t13*t15*t16-t6*t7*t10*t12*t15*t16+t3*t7*t11*t13*t15*t18-t6*t7*t10*t12*t15*t18)*(-1.0/4.0);
  A0[4][2] = (t240*(t2*t10+t5*t8*t14-t7*t12*t20+t12*t13*t15+t5*t8*t30+t13*t14*t22+t7*t24*t25+t13*t14*t34-t4*t6*t8*t10+t6*t7*t8*t12-t5*t6*t14*t20+t6*t14*t21*t25+t5*t7*t15*t65-t4*t7*t10*t13*t15+t10*t11*t12*t14*t15))/4.0;
  A0[4][3] = (t240*(t92+t6*t15-t7*t28-t7*t36+t23*t56+t23*t58-t7*t8*t13+t8*t13*t21+t14*t15*t24+t6*t14*t42+t8*t13*t44+t6*t15*t58+t6*t14*t63+t14*t15*t59+t6*t15*t87))/4.0;
  A0[4][4] = (t245*(t154+t8*t14+t8*t30+t8*t38+t8*t80-t6*t14*t20+t13*t14*t28+t6*t14*t39+t13*t14*t36+t7*t15*t46-t7*t15*t53+t13*t14*t50+t7*t15*t65))/4.0;
  A0[4][5] = (t242*(t126+t13*(t40-t132)))/4.0-(t243*(t133-t159)*(t213+t231+t232-t15*(t133-t159)))/4.0-(t234*t243*(t45-t140))/4.0;
  A0[4][6] = t224*t242*(-1.0/4.0)+(t220*t243*(t213+t231+t232-t15*(t133-t159)))/4.0-(t234*t243*(t127-t170))/4.0;
  A0[5][0] = t235*t243*(-1.0/4.0);
  A0[5][1] = (t243*(t2+t2*t56+t2*t58-t4*t6*t8*t16-t4*t6*t8*t18-t7*t10*t12*t20+t10*t13*t14*t22+t3*t6*t11*t15*t16+t3*t6*t11*t15*t18+t5*t8*t10*t14*t16+t5*t8*t11*t13*t16-t4*t7*t13*t15*t16-t5*t6*t10*t14*t20+t5*t8*t10*t14*t18+t5*t8*t11*t13*t18-t4*t7*t13*t15*t18+t4*t6*t8*t16*t32-t4*t8*t14*t16*t24+t10*t12*t13*t15*t16+t4*t6*t8*t18*t32-t4*t8*t14*t18*t24+t10*t12*t13*t15*t18+t11*t12*t14*t15*t16+t4*t13*t15*t16*t21+t11*t12*t14*t15*t18+t4*t13*t15*t18*t21-t3*t7*t8*t11*t13*t16+t6*t7*t8*t10*t12*t16-t3*t7*t8*t11*t13*t18-t5*t6*t7*t11*t15*t16+t6*t7*t8*t10*t12*t18-t5*t6*t7*t11*t15*t18))/4.0;
  A0[5][2] = t240*(-t9*t10-t8*t12*t13+t5*t14*t15+t7*t12*t23+t5*t15*t30-t13*t14*t25+t7*t22*t24+t13*t14*t31-t4*t6*t10*t15+t6*t7*t12*t15+t5*t6*t14*t23+t6*t14*t21*t22+t5*t7*t8*t45+t4*t7*t8*t10*t13-t8*t10*t11*t12*t14)*(-1.0/4.0);
  A0[5][3] = t240*(t117-t6*t8+t7*t43+t7*t62+t20*t56+t20*t58-t7*t13*t15+t6*t8*t32-t8*t14*t24-t6*t14*t29+t13*t15*t21-t6*t14*t35+t8*t14*t37+t6*t8*t54+t13*t15*t44)*(-1.0/4.0);
  A0[5][4] = t245*(t156+t14*t15+t15*t30+t15*t38+t15*t80+t6*t14*t23+t6*t14*t33+t7*t8*t45+t13*t14*t40+t7*t8*t53+t13*t14*t47+t7*t8*t66+t13*t14*t64)*(-1.0/4.0);
  A0[5][5] = t242*(t133-t159)*(-1.0/4.0)-(t243*(t126+t13*(t40-t132))*(t213+t231+t232-t15*(t133-t159)))/4.0+(t235*t243*(t45-t140))/4.0;
  A0[5][6] = (t220*t242)/4.0+(t224*t243*(t213+t231+t232-t15*(t133-t159)))/4.0+(t235*t243*(t127-t170))/4.0;
  A0[6][0] = t242/4.0;
  A0[6][1] = (t243*(t9*t15*t46+t2*t8*t66+t6*t8*t10*t22+t7*t11*t12*t16+t4*t13*t14*t16+t7*t11*t12*t18+t4*t13*t14*t18+t2*t14*t15*t21+t8*t9*t14*t21-t6*t10*t15*t25+t2*t7*t15*t38+t7*t8*t9*t38+t5*t6*t11*t14*t16+t5*t6*t11*t14*t18+t5*t8*t10*t13*t20+t7*t8*t10*t13*t25-t5*t10*t13*t15*t23+t7*t10*t13*t15*t22+t8*t10*t12*t14*t23+t10*t12*t14*t15*t20-t5*t6*t7*t8*t10*t23-t5*t6*t7*t10*t15*t20))/4.0;
  A0[6][2] = (t240*(t3-t5*t7+t6*t12*t14+t6*t8*t25+t6*t15*t22+t6*t15*t34+t5*t7*t48-t5*t7*t55+t6*t8*t57+t5*t8*t13*t23-t7*t8*t13*t22+t5*t13*t15*t20-t8*t12*t14*t20+t7*t13*t15*t25-t7*t8*t13*t34+t8*t13*t21*t22+t12*t14*t15*t23+t8*t14*t24*t25-t13*t15*t21*t25+t14*t15*t22*t24+t7*t13*t15*t57+t6*t8*t25*t58+t6*t15*t22*t58))/4.0;
  A0[6][3] = t240*(t10*t11+t13*t14+t8*t13*t29+t8*t14*t28+t8*t13*t35+t8*t14*t36+t14*t15*t40+t13*t15*t42+t8*t14*t50+t14*t15*t47+t15*t23*t46+t13*t15*t63+t14*t15*t64+t8*t20*t66-t6*t7*t15*t29+t6*t7*t8*t42-t6*t7*t15*t35+t7*t8*t23*t38+t7*t15*t20*t38+t6*t7*t8*t63)*(-1.0/4.0);
  A0[6][4] = t245*(t7-t93+t7*t55+t7*t71+t7*t72+t7*t74+t7*t78+t7*t81+t7*t82+t7*t108-t8*t13*t23-t13*t15*t20-t6*t15*t28+t6*t8*t40-t8*t13*t33-t6*t15*t36+t6*t8*t47+t13*t15*t39-t6*t15*t50+t6*t8*t64+t8*t13*t23*t32+t13*t15*t20*t32)*(-1.0/4.0);
  A0[6][5] = t245*(t45+t53+t66-t7*t15*t29+t7*t8*t42-t7*t15*t35+t7*t8*t52+t7*t15*t49+t7*t8*t63+t8*t13*t14*t20+t6*t8*t14*t28+t6*t8*t14*t36-t13*t14*t15*t23+t6*t14*t15*t40-t13*t14*t15*t33+t6*t8*t14*t50+t6*t14*t15*t47+t8*t13*t14*t61+t6*t14*t15*t64)*(-1.0/4.0);
  A0[6][6] = t242*(t127-t170)*(-1.0/4.0)+(t220*t235*t243)/4.0+(t224*t234*t243)/4.0;

  // auto genetated code end

  for(int i=0;i<7;i++)
      for(int j=0;j<7;j++)
        jacobian(i,j) = A0[i][j];

}

void HessianCal::getAnalyticalJacobianOmega(const vector<double> &qs, Eigen::Matrix<double,6,7> &jacobian)//updated
{
  double q1 = qs[0];
  double q2 = qs[1];
  double q3 = qs[2];
  double q4 = qs[3];
  double q5 = qs[4];
  double q6 = qs[5];
  double q7 = qs[6];

  double A0[6][7];
  memset(A0,0,sizeof(A0));

  double t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,t45,t46,t47,t48,t49,t50;
  double t51,t52,t53,t54,t55,t56,t57,t58,t59,t60,t61,t62,t63,t64,t65,t66,t67,t68,t69,t70,t71,t72,t73,t74,t75,t76,t77,t78,t79,t80,t81,t82,t83,t84,t85,t86,t87,t88,t89,t90,t91,t92,t93,t94,t95,t96,t97,t98,t99;
  double t100,t101,t102,t103,t104,t105;

  t2 = cos(q1);
  t3 = cos(q2);
  t4 = cos(q3);
  t5 = cos(q4);
  t6 = cos(q5);
  t7 = cos(q6);
  t8 = sin(q1);
  t9 = sin(q2);
  t10 = sin(q3);
  t11 = sin(q4);
  t12 = sin(q5);
  t13 = sin(q6);
  t14 = t2*t4;
  t15 = t3*t5;
  t16 = t2*t10;
  t17 = t4*t8;
  t18 = t3*t11;
  t19 = t8*t10;
  t20 = t7*8.8E+1;
  t21 = t13*1.07E+2;
  t22 = t8*t9*t11;
  t23 = t9*t10*t12;
  t27 = t2*t5*t9;
  t28 = t4*t5*t9;
  t30 = t2*t9*t11;
  t31 = t5*t8*t9;
  t32 = t4*t9*t11;
  t33 = t6*t9*t10;
  t40 = t3*(7.9E+1/2.5E+2);
  t42 = t4*t9*(3.3E+1/4.0E+2);
  t24 = t3*t14;
  t25 = t3*t16;
  t26 = t3*t17;
  t29 = t3*t19;
  t35 = -t28;
  t37 = -t30;
  t38 = -t31;
  t39 = -t33;
  t41 = t15*(4.8E+1/1.25E+2);
  t43 = t18*(3.3E+1/4.0E+2);
  t44 = -t42;
  t46 = t22*(3.3E+1/4.0E+2);
  t49 = t15+t32;
  t50 = t20+t21;
  t51 = t27*(4.8E+1/1.25E+2);
  t52 = t28*(3.3E+1/4.0E+2);
  t53 = t31*(4.8E+1/1.25E+2);
  t54 = t32*(4.8E+1/1.25E+2);
  t55 = t30*(3.3E+1/4.0E+2);
  t34 = -t24;
  t36 = -t29;
  t45 = -t43;
  t47 = t16+t26;
  t48 = t17+t25;
  t58 = t18+t35;
  t71 = t13*t49*(1.1E+1/1.25E+2);
  t75 = t7*t49*(1.07E+2/1.0E+3);
  t56 = t14+t36;
  t57 = t19+t34;
  t59 = t5*t47;
  t60 = t6*t48;
  t61 = t11*t47;
  t62 = t12*t48;
  t65 = t6*t58;
  t68 = t12*t58;
  t77 = -t75;
  t63 = t5*t57;
  t64 = t6*t56;
  t66 = t11*t57;
  t67 = t12*t56;
  t70 = t59*(3.3E+1/4.0E+2);
  t72 = t61*(4.8E+1/1.25E+2);
  t73 = t22+t59;
  t78 = t38+t61;
  t79 = t23+t65;
  t83 = t39+t68;
  t89 = t13*(t31-t61)*(-1.1E+1/1.25E+2);
  t91 = t13*(t31-t61)*(1.1E+1/1.25E+2);
  t93 = t7*(t31-t61)*(-1.07E+2/1.0E+3);
  t69 = -t64;
  t74 = t63*(3.3E+1/4.0E+2);
  t76 = t66*(4.8E+1/1.25E+2);
  t80 = t27+t66;
  t81 = t6*t73;
  t82 = t12*t73;
  t84 = t37+t63;
  t85 = -t6*(t30-t63);
  t86 = -t12*(t30-t63);
  t88 = t7*t79*(1.1E+1/1.25E+2);
  t94 = t13*t79*(1.07E+2/1.0E+3);
  t87 = t13*t80*(1.1E+1/1.25E+2);
  t92 = t7*t80*(1.07E+2/1.0E+3);
  t95 = t67+t81;
  t96 = t62+t85;
  t97 = t69+t82;
  t102 = t71+t77+t88+t94;
  t90 = -t87;
  t98 = t7*t95*(1.1E+1/1.25E+2);
  t99 = t7*t96*(1.1E+1/1.25E+2);
  t100 = t13*t95*(1.07E+2/1.0E+3);
  t101 = t13*t96*(1.07E+2/1.0E+3);
  t103 = t41+t45+t52+t54+t102;
  t104 = t40+t44+t103;
  A0[0][0] = t16*(-3.3E+1/4.0E+2)-t26*(3.3E+1/4.0E+2)+t46-t53+t70+t72+t89-t98-t100-t8*t9*(7.9E+1/2.5E+2)+t7*(t31-t61)*(1.07E+2/1.0E+3);
  A0[0][1] = t2*t104;
  A0[0][2] = t17*(-3.3E+1/4.0E+2)-t25*(3.3E+1/4.0E+2)+t5*t17*(3.3E+1/4.0E+2)+t11*t17*(4.8E+1/1.25E+2)+t15*t16*(3.3E+1/4.0E+2)+t16*t18*(4.8E+1/1.25E+2)-t7*t11*t17*(1.07E+2/1.0E+3)+t7*t12*t19*(1.1E+1/1.25E+2)-t7*t16*t18*(1.07E+2/1.0E+3)+t11*t13*t17*(1.1E+1/1.25E+2)-t7*t12*t24*(1.1E+1/1.25E+2)+t12*t13*t19*(1.07E+2/1.0E+3)+t13*t16*t18*(1.1E+1/1.25E+2)-t12*t13*t24*(1.07E+2/1.0E+3)-t5*t6*t7*t17*(1.1E+1/1.25E+2)-t5*t6*t13*t17*(1.07E+2/1.0E+3)-t6*t7*t15*t16*(1.1E+1/1.25E+2)-t6*t13*t15*t16*(1.07E+2/1.0E+3);
  A0[0][3] = -t56*t103-t9*t10*(t46-t53+t70+t72+t89-t98-t100+t7*(t31-t61)*(1.07E+2/1.0E+3));
  A0[0][4] = t50*(t6*t17+t6*t25+t12*t30-t5*t12*t19+t12*t14*t15)*(-1.0/1.0E+3);
  A0[0][5] = (t33-t68)*(t91+t93+t98+t100)-t102*(t64-t82);
  A0[1][0] = t19*(-3.3E+1/4.0E+2)+t24*(3.3E+1/4.0E+2)+t51-t55+t74+t76+t87-t92-t99-t101+t2*t9*(7.9E+1/2.5E+2);
  A0[1][1] = t8*t104;
  A0[1][2] = t14*(3.3E+1/4.0E+2)-t29*(3.3E+1/4.0E+2)-t5*t14*(3.3E+1/4.0E+2)-t11*t14*(4.8E+1/1.25E+2)+t15*t19*(3.3E+1/4.0E+2)+t18*t19*(4.8E+1/1.25E+2)+t7*t11*t14*(1.07E+2/1.0E+3)-t7*t12*t16*(1.1E+1/1.25E+2)-t11*t13*t14*(1.1E+1/1.25E+2)-t12*t13*t16*(1.07E+2/1.0E+3)-t7*t18*t19*(1.07E+2/1.0E+3)-t7*t12*t26*(1.1E+1/1.25E+2)+t13*t18*t19*(1.1E+1/1.25E+2)-t12*t13*t26*(1.07E+2/1.0E+3)+t5*t6*t7*t14*(1.1E+1/1.25E+2)+t5*t6*t13*t14*(1.07E+2/1.0E+3)-t6*t7*t15*t19*(1.1E+1/1.25E+2)-t6*t13*t15*t19*(1.07E+2/1.0E+3);
  A0[1][3] = -t48*t103-t9*t10*(t51-t55+t74+t76+t87-t92-t99-t101);
  A0[1][4] = t50*(-t6*t14+t12*t22+t6*t29+t5*t12*t16+t12*t15*t17)*(-1.0/1.0E+3);
  A0[1][5] = -t102*(t60+t12*(t30-t63))+(t33-t68)*(t90+t92+t99+t101);
  A0[2][1] = t9*(-7.9E+1/2.5E+2)-t3*t4*(3.3E+1/4.0E+2)-t5*t9*(4.8E+1/1.25E+2)+t4*t15*(3.3E+1/4.0E+2)+t9*t11*(3.3E+1/4.0E+2)+t4*t18*(4.8E+1/1.25E+2)+t5*t7*t9*(1.07E+2/1.0E+3)-t5*t9*t13*(1.1E+1/1.25E+2)-t4*t7*t18*(1.07E+2/1.0E+3)+t4*t13*t18*(1.1E+1/1.25E+2)+t3*t7*t10*t12*(1.1E+1/1.25E+2)-t4*t6*t7*t15*(1.1E+1/1.25E+2)-t6*t7*t9*t11*(1.1E+1/1.25E+2)+t3*t10*t12*t13*(1.07E+2/1.0E+3)-t4*t6*t13*t15*(1.07E+2/1.0E+3)-t6*t9*t11*t13*(1.07E+2/1.0E+3);
  A0[2][2] = (t9*(t10*1.65E+2-t5*t10*1.65E+2-t10*t11*7.68E+2+t4*t7*t12*1.76E+2+t7*t10*t11*2.14E+2+t4*t12*t13*2.14E+2-t10*t11*t13*1.76E+2+t5*t6*t7*t10*1.76E+2+t5*t6*t10*t13*2.14E+2))/2.0E+3;
  A0[2][3] = t15*(-3.3E+1/4.0E+2)-t18*(4.8E+1/1.25E+2)+t28*(4.8E+1/1.25E+2)-t32*(3.3E+1/4.0E+2)+t7*t18*(1.07E+2/1.0E+3)-t13*t18*(1.1E+1/1.25E+2)-t7*t28*(1.07E+2/1.0E+3)+t13*t28*(1.1E+1/1.25E+2)+t6*t7*t15*(1.1E+1/1.25E+2)+t6*t13*t15*(1.07E+2/1.0E+3)+t6*t7*t32*(1.1E+1/1.25E+2)+t6*t13*t32*(1.07E+2/1.0E+3);
  A0[2][4] = (t50*(t33-t12*t18+t12*t28))/1.0E+3;
  A0[2][5] = t7*t15*(1.1E+1/1.25E+2)+t13*t15*(1.07E+2/1.0E+3)+t7*t23*(1.07E+2/1.0E+3)-t13*t23*(1.1E+1/1.25E+2)+t7*t32*(1.1E+1/1.25E+2)+t13*t32*(1.07E+2/1.0E+3)+t6*t7*t18*(1.07E+2/1.0E+3)-t6*t13*t18*(1.1E+1/1.25E+2)-t6*t7*t28*(1.07E+2/1.0E+3)+t6*t13*t28*(1.1E+1/1.25E+2);
  A0[3][1] = -t8;
  A0[3][2] = t2*t9;
  A0[3][3] = t48;
  A0[3][4] = t80;
  A0[3][5] = t60+t12*(t30-t63);
  A0[3][6] = -t7*t80-t13*t96;
  A0[4][1] = t2;
  A0[4][2] = t8*t9;
  A0[4][3] = -t14+t29;
  A0[4][4] = t31-t61;
  A0[4][5] = t97;
  A0[4][6] = t13*t95-t7*(t31-t61);
  A0[5][0] = 1.0;
  A0[5][2] = t3;
  A0[5][3] = -t9*t10;
  A0[5][4] = t49;
  A0[5][5] = t83;
  A0[5][6] = -t7*t49+t13*t79;

  for(int i=0;i<6;i++)
      for(int j=0;j<7;j++)
        jacobian(i,j) = A0[i][j];
}

void HessianCal::getEEFTransform(const vector<double> &qs, Eigen::Matrix3d &rotm, Eigen::Vector3d &translation)//updated
{
  double q1 = qs[0];
  double q2 = qs[1];
  double q3 = qs[2];
  double q4 = qs[3];
  double q5 = qs[4];
  double q6 = qs[5];
  double q7 = qs[6];

  double t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,t45,t46,t47,t48,t49,t50;
  double t51,t52,t53,t54,t55,t56,t57,t58,t59,t60,t61,t62,t63,t64,t65,t66,t67,t68,t69,t70,t71,t72,t73,t74,t75,t76,t77,t78,t79,t80,t81,t82,t83,t84,t85;

  t2 = cos(q1);
  t3 = cos(q2);
  t4 = cos(q3);
  t5 = cos(q4);
  t6 = cos(q5);
  t7 = cos(q6);
  t8 = cos(q7);
  t9 = sin(q1);
  t10 = sin(q2);
  t11 = sin(q3);
  t12 = sin(q4);
  t13 = sin(q5);
  t14 = sin(q6);
  t15 = sin(q7);
  t16 = t2*t4;
  t17 = t3*t5;
  t18 = t2*t11;
  t19 = t4*t9;
  t20 = t3*t12;
  t21 = t9*t11;
  t22 = t9*t10*t12;
  t23 = t10*t11*t13;
  t27 = t2*t5*t10;
  t28 = t4*t5*t10;
  t30 = t2*t10*t12;
  t31 = t5*t9*t10;
  t32 = t4*t10*t12;
  t33 = t6*t10*t11;
  t24 = t3*t16;
  t25 = t3*t18;
  t26 = t3*t19;
  t29 = t3*t21;
  t35 = -t28;
  t37 = -t30;
  t38 = -t31;
  t39 = -t33;
  t42 = t17+t32;
  t34 = -t24;
  t36 = -t29;
  t40 = t18+t26;
  t41 = t19+t25;
  t45 = t20+t35;
  t50 = t14*t42;
  t43 = t16+t36;
  t44 = t21+t34;
  t46 = t5*t40;
  t47 = t6*t41;
  t48 = t12*t40;
  t49 = t13*t41;
  t54 = t6*t45;
  t57 = t13*t45;
  t51 = t5*t44;
  t52 = t6*t43;
  t53 = -t47;
  t55 = t12*t44;
  t56 = t13*t43;
  t59 = t22+t46;
  t60 = t38+t48;
  t61 = t23+t54;
  t65 = t39+t57;
  t69 = -t14*(t31-t48);
  t58 = -t52;
  t62 = t27+t55;
  t63 = t6*t59;
  t64 = t13*t59;
  t66 = t37+t51;
  t68 = t7*t61;
  t70 = -t6*(t30-t51);
  t71 = -t13*(t30-t51);
  t67 = t14*t62;
  t72 = t56+t63;
  t73 = t50+t68;
  t74 = t49+t70;
  t75 = t58+t64;
  t77 = t53+t71;
  t76 = t7*t72;
  t78 = t7*t74;
  t79 = -t76;
  t80 = -t78;
  t81 = t69+t79;
  t82 = t67+t80;
  rotm(0,0) = t15*(t47+t13*(t30-t51))+t8*t82;
  rotm(0,1) = t8*(t47+t13*(t30-t51))-t15*t82;
  rotm(0,2) = -t7*t62-t14*t74;
  translation(0) = t21*(-3.3E+1/4.0E+2)+t24*(3.3E+1/4.0E+2)+t27*(4.8E+1/1.25E+2)-t30*(3.3E+1/4.0E+2)+t51*(3.3E+1/4.0E+2)+t55*(4.8E+1/1.25E+2)+t67*(1.1E+1/1.25E+2)-t78*(1.1E+1/1.25E+2)+t2*t10*(7.9E+1/2.5E+2)-t7*t62*(1.07E+2/1.0E+3)-t14*t74*(1.07E+2/1.0E+3);
  rotm(1,0) = t8*(t76+t14*(t31-t48))-t15*(t52-t64);
  rotm(1,1) = -t15*(t76+t14*(t31-t48))-t8*(t52-t64);
  rotm(1,2) = t14*t72-t7*(t31-t48);
  translation(1) = t18*(3.3E+1/4.0E+2)-t22*(3.3E+1/4.0E+2)+t26*(3.3E+1/4.0E+2)+t31*(4.8E+1/1.25E+2)-t46*(3.3E+1/4.0E+2)-t48*(4.8E+1/1.25E+2)+t76*(1.1E+1/1.25E+2)+t9*t10*(7.9E+1/2.5E+2)+t14*t72*(1.07E+2/1.0E+3)-t7*(t31-t48)*(1.07E+2/1.0E+3)+t14*(t31-t48)*(1.1E+1/1.25E+2);
  rotm(2,0) = t8*t73-t15*(t33-t57);
  rotm(2,1) = -t15*t73-t8*(t33-t57);
  rotm(2,2) = -t7*t42+t14*t61;
  translation(2) = t3*(7.9E+1/2.5E+2)+t17*(4.8E+1/1.25E+2)-t20*(3.3E+1/4.0E+2)+t28*(3.3E+1/4.0E+2)+t32*(4.8E+1/1.25E+2)+t50*(1.1E+1/1.25E+2)+t68*(1.1E+1/1.25E+2)-t4*t10*(3.3E+1/4.0E+2)-t7*t42*(1.07E+2/1.0E+3)+t14*t61*(1.07E+2/1.0E+3)+3.33E+2/1.0E+3;
  return;
}
void HessianCal::rotm2quat(const Eigen::Matrix3d &rotm, Eigen::Vector4d &quat)
{
  double m00 = rotm(0,0);
  double m11 = rotm(1,1);
  double m22 = rotm(2,2);
  double trace = m00+m11+m22;
  if(trace>0)
  {
    double S = std::sqrt(trace+1)*2;
    quat(0) = 0.25*S;
    quat(1) = (rotm(2,1)-rotm(1,2))/S;
    quat(2) = (rotm(0,2)-rotm(2,0))/S;
    quat(3) = (rotm(1,0)-rotm(0,1))/S;
  }
  else if(m00>m11 && m00>m22)
  {
    double S = std::sqrt(1+m00-m11-m22)*2;
    quat(0) = (rotm(2,1)-rotm(1,2))/S;
    quat(1) = 0.25*S;
    quat(2) = (rotm(0,1)+rotm(1,0))/S;
    quat(3) = (rotm(0,2)+rotm(2,0))/S;
  }
  else if(m11>m22)
  {
    double S = std::sqrt(1+m11-m00-m22)*2;
    quat(0) = (rotm(0,2)-rotm(2,0))/S;
    quat(1) = (rotm(0,1)+rotm(1,0))/S;
    quat(2) = 0.25*S;
    quat(3) = (rotm(1,2)+rotm(2,1))/S;
  }
  else
  {
    double S = std::sqrt(1+m22-m00-m11)*2;
    quat(0) = (rotm(1,0)-rotm(0,1))/S;
    quat(1) = (rotm(0,2)+rotm(2,0))/S;
    quat(2) = (rotm(1,2)+rotm(2,1))/S;
    quat(3) = 0.25*S;
  }

}
void HessianCal::getPosition(const vector<double> &qs, Vector7d &eef_position)//updated
{

  // temp variables used for matlab auto generated code

  double q1 = qs[0];
  double q2 = qs[1];
  double q3 = qs[2];
  double q4 = qs[3];
  double q5 = qs[4];
  double q6 = qs[5];
  double q7 = qs[6];

  double t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,t45,t46,t47,t48,t49,t50;
  double t51,t52,t53,t54,t55,t56,t57,t58,t59,t60,t61,t62,t63,t64,t65,t66,t67,t68,t69,t70,t71,t72,t73,t74,t75,t76,t77,t78,t79,t80,t81,t82,t83,t84,t85,t86,t87,t88,t89,t90,t91,t92,t93,t94,t95;
  double A0[7][1];
  memset(A0,0,sizeof(A0));

  // auto generated code
  t2 = cos(q1);
  t3 = cos(q2);
  t4 = cos(q3);
  t5 = cos(q4);
  t6 = cos(q5);
  t7 = cos(q6);
  t8 = cos(q7);
  t9 = sin(q1);
  t10 = sin(q2);
  t11 = sin(q3);
  t12 = sin(q4);
  t13 = sin(q5);
  t14 = sin(q6);
  t15 = sin(q7);
  t16 = t2*t4;
  t17 = t3*t5;
  t18 = t2*t11;
  t19 = t4*t9;
  t20 = t3*t12;
  t21 = t9*t11;
  t22 = t9*t10*t12;
  t23 = t10*t11*t13;
  t27 = t2*t5*t10;
  t28 = t4*t5*t10;
  t30 = t2*t10*t12;
  t31 = t5*t9*t10;
  t32 = t4*t10*t12;
  t33 = t6*t10*t11;
  t24 = t3*t16;
  t25 = t3*t18;
  t26 = t3*t19;
  t29 = t3*t21;
  t35 = -t28;
  t37 = -t30;
  t38 = -t31;
  t39 = -t33;
  t42 = t17+t32;
  t34 = -t24;
  t36 = -t29;
  t40 = t18+t26;
  t41 = t19+t25;
  t45 = t20+t35;
  t48 = t7*t42;
  t51 = t14*t42;
  t43 = t16+t36;
  t44 = t21+t34;
  t46 = t5*t40;
  t47 = t6*t41;
  t49 = t12*t40;
  t50 = t13*t41;
  t55 = t6*t45;
  t56 = -t48;
  t59 = t13*t45;
  t52 = t5*t44;
  t53 = t6*t43;
  t54 = -t47;
  t57 = t12*t44;
  t58 = t13*t43;
  t61 = t22+t46;
  t62 = t38+t49;
  t63 = t23+t55;
  t67 = t39+t59;
  t71 = -t14*(t31-t49);
  t60 = -t53;
  t64 = t27+t57;
  t65 = t6*t61;
  t66 = t13*t61;
  t68 = t37+t52;
  t70 = t7*t63;
  t72 = t14*t63;
  t73 = -t6*(t30-t52);
  t74 = -t13*(t30-t52);
  t85 = -t15*(t47+t13*(t30-t52));
  t86 = t15*(t47+t13*(t30-t52));
  t69 = t14*t64;
  t75 = t58+t65;
  t76 = t51+t70;
  t77 = t50+t73;
  t78 = t60+t66;
  t80 = t54+t74;
  t83 = -t8*(t53-t66);
  t79 = t7*t75;
  t81 = t7*t77;
  t82 = -t79;
  t84 = -t81;
  t89 = -t15*(t79+t14*(t31-t49));
  t87 = t71+t82;
  t88 = t69+t84;
  t90 = t8*t88;
  t91 = t56+t72+t83+t86+t89+t90+1.0;
  t92 = 1.0/sqrt(t91);
  A0[0][0] = t21*(-3.3E+1/4.0E+2)+t24*(3.3E+1/4.0E+2)+t27*(4.8E+1/1.25E+2)-t30*(3.3E+1/4.0E+2)+t52*(3.3E+1/4.0E+2)+t57*(4.8E+1/1.25E+2)+t69*(1.1E+1/1.25E+2)-t81*(1.1E+1/1.25E+2)+t2*t10*(7.9E+1/2.5E+2)-t7*t64*(1.07E+2/1.0E+3)-t14*t77*(1.07E+2/1.0E+3);
  A0[1][0] = t18*(3.3E+1/4.0E+2)-t22*(3.3E+1/4.0E+2)+t26*(3.3E+1/4.0E+2)+t31*(4.8E+1/1.25E+2)-t46*(3.3E+1/4.0E+2)-t49*(4.8E+1/1.25E+2)+t79*(1.1E+1/1.25E+2)+t9*t10*(7.9E+1/2.5E+2)+t14*t75*(1.07E+2/1.0E+3)-t7*(t31-t49)*(1.07E+2/1.0E+3)+t14*(t31-t49)*(1.1E+1/1.25E+2);
  A0[2][0] = t3*(7.9E+1/2.5E+2)+t17*(4.8E+1/1.25E+2)-t20*(3.3E+1/4.0E+2)+t28*(3.3E+1/4.0E+2)+t32*(4.8E+1/1.25E+2)-t48*(1.07E+2/1.0E+3)+t51*(1.1E+1/1.25E+2)+t70*(1.1E+1/1.25E+2)+t72*(1.07E+2/1.0E+3)-t4*t10*(3.3E+1/4.0E+2)+3.33E+2/1.0E+3;
  A0[3][0] = 1.0/(t92*2.0);
  A0[4][0] = t92*(t14*t75+t15*t76-t7*(t31-t49)+t8*(t33-t59))*(-1.0/2.0);
  A0[5][0] = t92*(t7*t64+t8*t76+t14*t77-t15*(t33-t59))*(-1.0/2.0);
  A0[6][0] = t92*(t8*(t47+t13*(t30-t52))-t8*(t79+t14*(t31-t49))-t15*t88+t15*(t53-t66))*(-1.0/2.0);



  for(int i=0;i<7;i++)
    eef_position(i) = A0[i][0];
}

void HessianCal::getAnalyJaco4Ref(const int link_index, const vector<double> &qs, Eigen::Matrix<double,3,7>& jacobian, const Eigen::Vector3d &ref)//updated ?verifing
{

  double q1 = qs[0];
  double q2 = qs[1];
  double q3 = qs[2];
  double q4 = qs[3];
  double q5 = qs[4];
  double q6 = qs[5];
  double x = ref(0);
  double y = ref(1);
  double z = ref(2);
  double t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,t45,t46,t47,t48,t49,t50;
  double t51,t52,t53,t54,t55,t56,t57,t58,t59,t60,t61,t62,t63,t64,t65,t66,t67,t68,t69,t70,t71,t72,t73,t74,t75,t76,t77,t78,t79,t80,t81,t82,t83,t84,t85,t86,t87,t88,t89,t90,t91;

  t2 = cos(q1);
  t3 = cos(q2);
  t4 = cos(q3);
  t5 = cos(q4);
  t6 = cos(q5);
  t7 = sin(q1);
  t8 = sin(q2);
  t9 = sin(q3);
  t10 = sin(q4);
  t11 = sin(q5);
  t12 = -y;
  t13 = -z;
  t41 = z-3.33E+2/1.0E+3;
  t14 = t2*t4;
  t15 = t3*t5;
  t16 = t2*t9;
  t17 = t4*t7;
  t18 = t3*t10;
  t19 = t7*t9;
  t20 = t7*t8*t10;
  t24 = t4*t5*t8;
  t26 = t2*t8*t10;
  t27 = t4*t8*t10;
  t28 = t6*t8*t9;
  t34 = t3*(7.9E+1/2.5E+2);
  t37 = t4*t8*(3.3E+1/4.0E+2);
  t42 = t2*t8*(7.9E+1/2.5E+2);
  t45 = t7*t8*(7.9E+1/2.5E+2);
  t21 = t3*t14;
  t22 = t3*t16;
  t23 = t3*t17;
  t25 = t3*t19;
  t30 = -t24;
  t32 = -t26;
  t33 = -t28;
  t35 = t15*(4.8E+1/1.25E+2);
  t36 = t16*(3.3E+1/4.0E+2);
  t38 = t18*(3.3E+1/4.0E+2);
  t39 = t19*(3.3E+1/4.0E+2);
  t40 = -t34;
  t43 = -t37;
  t46 = -t42;
  t49 = t15+t27;
  t52 = t24*(3.3E+1/4.0E+2);
  t53 = t27*(4.8E+1/1.25E+2);
  t29 = -t21;
  t31 = -t25;
  t44 = -t38;
  t47 = t16+t23;
  t48 = t17+t22;
  t50 = t21*(3.3E+1/4.0E+2);
  t51 = t23*(3.3E+1/4.0E+2);
  t57 = t18+t30;
  t70 = t37+t40+t41;
  t54 = -t50;
  t55 = t14+t31;
  t56 = t19+t29;
  t58 = t5*t47;
  t59 = t6*t48;
  t63 = t11*t57;
  t72 = t12+t36+t45+t51;
  t75 = t13+t34+t35+t43+t44+t52+t53+3.33E+2/1.0E+3;
  t60 = t5*t56;
  t61 = t6*t55;
  t62 = -t59;
  t65 = t20+t58;
  t67 = t33+t63;
  t71 = t39+t46+t54+x;
  t64 = -t61;
  t66 = t11*t65;
  t68 = t32+t60;
  t69 = -t11*(t26-t60);
  t73 = t64+t66;
  t74 = t62+t69;
  

  for(int i=0;i<3;i++)
    for(int j=0;j<7;j++)
      jacobian(i,j) = 0;

  jacobian(0,0) = t12;
  jacobian(1,0) = x;

  jacobian(0,1) = t2*t41;
  jacobian(1,1) = t7*t41;
  jacobian(2,1) = t7*t12-t2*x;
  if(link_index == 2)
    return;


  jacobian(0,2) = t3*t12-t7*t8*(3.33E+2/1.0E+3)+t7*t8*z;
  jacobian(1,2) = t2*t8*(3.33E+2/1.0E+3)+t3*x+t2*t8*t13;
  jacobian(2,2) = -t8*(t2*t12+t7*x);

  jacobian(0,3) = t55*(t13+t34+t43+3.33E+2/1.0E+3)-t8*t9*t72;
  jacobian(1,3) = t48*(t13+t34+t43+3.33E+2/1.0E+3)-t8*t9*(t39-t42+t54+x);
  jacobian(2,3) = -t48*t72+t55*(t39-t42+t54+x);
  
  if(link_index == 1)
    return;

  
  
  
  jacobian(0,4) = t75*(t10*t47-t5*t7*t8)-t49*(t20*(3.3E+1/4.0E+2)-t36-t45-t51+t58*(3.3E+1/4.0E+2)+y+t10*t47*(4.8E+1/1.25E+2)-t5*t7*t8*(4.8E+1/1.25E+2));
  jacobian(0,5) = -t12*(t28-t63)-z*(t61-t66);
  jacobian(1,4) = t75*(t10*t56+t2*t5*t8)-t49*(t26*(-3.3E+1/4.0E+2)-t39+t42+t50+t60*(3.3E+1/4.0E+2)-x+t10*t56*(4.8E+1/1.25E+2)+t2*t5*t8*(4.8E+1/1.25E+2));
  jacobian(1,5) = -z*(t59+t11*(t26-t60))-x*(t28-t63);
  jacobian(2,4) = t8*t9*(3.3E+1/4.0E+2)-t5*t8*t9*(3.3E+1/4.0E+2)-t8*t9*t10*(7.9E+1/2.5E+2)+t12*t14*t18+t10*t16*x+t17*t18*x+t10*t19*y-t5*t7*t8*x+t2*t5*t8*y;
  jacobian(2,5) = -t12*(t59+t11*(t26-t60))+x*(t61-t66);
 
  return;
}

